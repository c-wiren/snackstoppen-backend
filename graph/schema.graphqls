# GraphQL schema example
#
# https://gqlgen.com/getting-started/

scalar Time
scalar Upload
scalar JSON

enum ChipSortByInput {
  NAME_ASC
  RATING_DESC
}

enum ReviewSortByInput {
  DATE_DESC
}

enum BrandSortByInput {
  NAME_ASC
}

type Chip {
  id: ID!
  brand: Brand!
  category: String!
  image: String
  ingredients: String
  name: String!
  slug: String!
  subcategory: String
  rating: Float!
  reviews: Int!
}

type Brand {
  id: ID!
  count: Int!
  image: String
  name: String!
  categories: JSON
}

type Review {
  id: ID!
  chips: Chip
  rating: Int
  review: String
  user: User
  created: Time
  edited: Time
  likes: Int
  liked: Boolean
}

type User {
  id: ID!
  username: String
  firstname: String
  lastname: String
  created: Time
  image: String
  follow: Boolean
  following: Int
  followers: Int
}

type Query {
  search(q: String!): SearchResponse!
  chip(brand: String!, slug: String!): Chip
  chips(
    brand: String
    category: String
    subcategory: String
    order_by: ChipSortByInput
    limit: Int = 20
    offset: Int = 0
  ): [Chip]!
  brand(id: String!): Brand
  brands(order_by: BrandSortByInput): [Brand]!
  reviews(
    chips: Int
    author: String
    limit: Int = 10
    offset: Int = 0
    order_by: ReviewSortByInput = DATE_DESC
  ): [Review]!
  user(username: String!): User
  users(followers: String, following: String): [User]!
}

type SearchResponse {
  user: User
  chips: [Chip]!
}

type LoginResponse {
  user: User!
  token: String!
  refresh: String
  expires: Time!
}

input NewChip {
  brand: String!
  category: String!
  image: Upload
  ingredients: String
  name: String!
  slug: String!
  subcategory: String
}

input NewUser {
  username: String!
  firstname: String
  lastname: String
  image: String
  password: String!
  email: String!
  code: String!
  token: String!
}

input NewReview {
  chips: Int!
  rating: Int!
  review: String
}

type Mutation {
  createReview(review: NewReview!): Review!
  createChip(chip: NewChip!): Boolean
  createUser(user: NewUser!): LoginResponse!
  validateEmail(email: String!): String!
  login(email: String!, password: String!): LoginResponse!
  refresh(token: String!): LoginResponse!
  logoutAll: Boolean
  like(review: Int!): Review
  unlike(review: Int!): Review
  follow(user: Int!): User
  unfollow(user: Int!): User
  deleteReview(review: Int!): Boolean
}
