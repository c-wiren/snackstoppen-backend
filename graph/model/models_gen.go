// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Brand struct {
	ID    string  `json:"id"`
	Count int     `json:"count"`
	Image *string `json:"image"`
	Name  string  `json:"name"`
}

type NewChip struct {
	BrandID     *string `json:"brandId"`
	Category    *string `json:"category"`
	Image       *string `json:"image"`
	Ingredients *string `json:"ingredients"`
	Name        string  `json:"name"`
	Slug        *string `json:"slug"`
	Subcategory *string `json:"subcategory"`
}

type Review struct {
	ID     string `json:"id"`
	Chips  *Chip  `json:"chips"`
	Rating int    `json:"rating"`
}

type BrandSortByInput string

const (
	BrandSortByInputNameAsc BrandSortByInput = "NAME_ASC"
)

var AllBrandSortByInput = []BrandSortByInput{
	BrandSortByInputNameAsc,
}

func (e BrandSortByInput) IsValid() bool {
	switch e {
	case BrandSortByInputNameAsc:
		return true
	}
	return false
}

func (e BrandSortByInput) String() string {
	return string(e)
}

func (e *BrandSortByInput) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BrandSortByInput(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BrandSortByInput", str)
	}
	return nil
}

func (e BrandSortByInput) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ChipSortByInput string

const (
	ChipSortByInputNameAsc ChipSortByInput = "NAME_ASC"
)

var AllChipSortByInput = []ChipSortByInput{
	ChipSortByInputNameAsc,
}

func (e ChipSortByInput) IsValid() bool {
	switch e {
	case ChipSortByInputNameAsc:
		return true
	}
	return false
}

func (e ChipSortByInput) String() string {
	return string(e)
}

func (e *ChipSortByInput) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ChipSortByInput(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ChipSortByInput", str)
	}
	return nil
}

func (e ChipSortByInput) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
